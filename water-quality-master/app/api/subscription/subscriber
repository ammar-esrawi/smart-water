/**
 * This script is subscribed to the "requestChannel" to which the websocket node in the node-red sample application is publishing
 * The aforementioned applicaton simply reads messages from the device's mqtt topic and sends them through WS
 * This script is also subscribed to the "watson" channel that has a binding with the watson_nucleo endpoint. The latter is actually
 * subscribed to the nucleo device's mqtt topic on waston iot, therefore, the current script can directly consume messages from the topic
 * Once the current script receives the payload, it parses it and saves the data using an instance of DeviceManager
 */ 
var log = require("log");
log.setLevel("info");

var deviceManager = require("/app/entities/devicemanager");

var deviceProcessor = require("app/entities/deviceprocessor");
var deviceGenerator = require("app/simulator/utils/dataGenerator");
var deviceManager = require("app/entities/devicemanager");
var groupManager = require("app/entities/groupmanager");
var config = require("app/simulator/config");
var utils = require("app/entities/utils");

var _ = require("modules/underscore/underscore.js")._;


// read data from request rawBody or body property

var body = request.body ? request.body : request.rawBody;
var data;
if(body){
   data = typeof(data) == "string" ? JSON.parse(body).d : body.d;
}
if(data == null){
    if(request.body != null){
        data = request.body;
    }else if(request.parameters.body){
        data = request.parameters.body;
    } else {
        data = request.parameters;
    }
    if(typeof data == 'string'){
        try{
            data = JSON.parse(data);   
        }catch(e){
            return "INVALID OR MISSING PARAMETER";
        }
    }
}

log.info("/app/api/subscription/subscriber received the following payload \n" + JSON.stringify(data));

var deviceIds = [];
_.each( data, function( value, key ) {
  if ( value  && value["app"] == "WaterQuality") { //MFE: this is a hack as we are consuming from +/messages/json
      try {
        log.info("Consume mqtt topic data, it is for this app.")
        var deviceId = key;
        var entry = {};

        var deviceDefinition = deviceManager.getDeviceDefinition(deviceId);

        if(deviceDefinition == null) {
            entry = deviceGenerator.generateRandomDevice(
                {"lat": 45.5602805, "lng": -73.8521324});
            entry["source"] = "airvantage";
            entry["group"] = "acme";
        } else {
            entry.latitude = deviceDefinition.latitude;
            entry.longitude = deviceDefinition.longitude;
            entry.application = deviceDefinition.application;
            entry.material = deviceDefinition.material;
            entry.type = deviceDefinition.type;
            entry.group = deviceDefinition.group;
            entry.source = deviceDefinition.source;
        }
            
        _.extendOwn(entry, value);
		 entry["id"] = deviceId;
            
            
         var device = JSON.parse(JSON.stringify(entry));

         if(deviceDefinition == null) {
             //Save device definition
            deviceManager.saveDeviceDefinition(device);
            //Add device to group
            groupManager.saveGroupDevice({"id": device.group, "device": device.id});
         }
          deviceProcessor.processEntry(device);


    }catch(exception) {
        return exception;    
    }
  } else {
      log.info("Ingone mqtt topic data, not for this app.")
  }
});

return data;
/**var data = {"myName":"Nucleo","A_Temperature":60,"A_Humidity":71,"A_Pressure":1008.36,"Acc_X":6,"Acc_Y":-4,"Acc_Z":963,"GYR_X":1610,"GYR_Y":-3990,"GYR_Z":-2030,"MAG_X":4586,"MAG_Y":4586,"MAG_Z":2339};**/
//Assuming we are getting data


